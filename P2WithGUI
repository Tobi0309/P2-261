# GUI libraries
import tkinter as tk
from tkinter import *
from tkinter import messagebox
%pruh
# MyCobot libraries
from pymycobot.mycobot import MyCobot
import numpy as np
import serial
import time


########## Creating GUI window ##########
window = tk.Tk()

window.title("Pill dispencer GUI")


########## creats pill lists for the different people ##########

PillCount = [0,0,0,0,0,0]

ZeroPills = [0,0,0,0,0,0]
GrethePills = [1,2,3,4,5,6]
BirthePills = [3,3,3,3,3,3]
SoerenPills = [6,5,4,3,2,1]

########## global variables ##########

speed = 50 #Speed of the robot arm
gearSlopJoint4 = -3 #Adjusting for slop on the joint values
stage = 0 #Keeps track of every stage 



########## Functions ##########

# Functions for the "+" and "-" buttons

def clicked11(a):
    global PillCount 
    if PillCount[0] > 0:
        PillCount[0] = PillCount[0] - 1
        label1.configure(text=f'{PillCount[0]}')

def clicked12(a):
    global PillCount 
    PillCount[0] = PillCount[0] + 1
    label1.configure(text=f'{PillCount[0]}')


def clicked21(a):
    global PillCount 
    if PillCount[1] > 0:
        PillCount[1] = PillCount[1] - 1
        label2.configure(text=f'{PillCount[1]}')

def clicked22(a):
    global PillCount 
    PillCount[1] = PillCount[1] + 1
    label2.configure(text=f'{PillCount[1]}')


def clicked31(a):
    global PillCount 
    if PillCount[2] > 0:
        PillCount[2] = PillCount[2] - 1
        label3.configure(text=f'{PillCount[2]}')

def clicked32(a):
    global PillCount 
    PillCount[2] = PillCount[2] + 1
    label3.configure(text=f'{PillCount[2]}')


def clicked41(a):
    global PillCount 
    if PillCount[3] > 0:
        PillCount[3] = PillCount[3] - 1
        label4.configure(text=f'{PillCount[3]}')

def clicked42(a):
    global PillCount 
    PillCount[3] = PillCount[3] + 1
    label4.configure(text=f'{PillCount[3]}')


def clicked51(a):
    global PillCount 
    if PillCount[4] > 0:
        PillCount[4] = PillCount[4] - 1
        label5.configure(text=f'{PillCount[4]}')

def clicked52(a):
    global PillCount 
    PillCount[4] = PillCount[4] + 1
    label5.configure(text=f'{PillCount[4]}')


def clicked61(a):
    global PillCount
    if PillCount[5] > 0:
        PillCount[5] = PillCount[5] - 1
        label6.configure(text=f'{PillCount[5]}')

def clicked62(a):
    global PillCount
    PillCount[5] = PillCount[5] + 1
    label6.configure(text=f'{PillCount[5]}')


# Functions for the Tabs

def Zero(a):
    # Changes colores on the different taps
    tab_button0.configure(bg="black", fg="white")
    tab_button1.configure(bg="gray", fg="black")
    tab_button2.configure(bg="gray", fg="black")
    tab_button3.configure(bg="gray", fg="black")
    # gets the global variables
    global PillCount
    # Changes the global variables
    PillCount = ZeroPills
    TabChange(0)

def Grethe(a):
    tab_button0.configure(bg="gray", fg="black")
    tab_button1.configure(bg="black", fg="white")
    tab_button2.configure(bg="gray", fg="black")
    tab_button3.configure(bg="gray", fg="black")
    global PillCount
    PillCount = GrethePills
    TabChange(1)
    
def Birthe(a):
    tab_button0.configure(bg="gray", fg="black")
    tab_button1.configure(bg="gray", fg="black")
    tab_button2.configure(bg="black", fg="white")
    tab_button3.configure(bg="gray", fg="black")
    global PillCount
    PillCount = BirthePills
    TabChange(2)

def Soeren(a):
    tab_button0.configure(bg="gray", fg="black")
    tab_button1.configure(bg="gray", fg="black")
    tab_button2.configure(bg="gray", fg="black")
    tab_button3.configure(bg="black", fg="white")
    global PillCount
    PillCount = SoerenPills
    TabChange(3)


def TabChange(a):
    # Gets the global variables
    global PillCount

    # Changes the Number labels
    label1.configure(text=f'{PillCount[0]}')
    label2.configure(text=f'{PillCount[1]}')
    label3.configure(text=f'{PillCount[2]}')
    label4.configure(text=f'{PillCount[3]}')
    label5.configure(text=f'{PillCount[4]}')
    label6.configure(text=f'{PillCount[5]}')


######################################
########## Code for MyCobot ##########
######################################

def gearSlopAdjust(flist):
    #Adds constant to the 4th joint value in the point-array
    global gearSlopJoint4
    flist[3] += gearSlopJoint4

    return flist 

def open():
    #Opens gripper
    ser.write(str.encode('179,'))
    time.sleep(1)

def close():
    #Closes gripper
    ser.write(str.encode('1,'))
    time.sleep(1)

def destinationArrival(position):
    #Pauses program untill the destination has been arrived 
    global stage

    allWithinRange = False
    while not allWithinRange:
        #Checks to see if every element is within range
        allWithinRange = True
        allAngles = mc.get_angles()
        for i in range(6):
            if abs(position[i] - allAngles[i]) > 3:
                allWithinRange = False
                #print(abs(position[i] - allAngles[i])) #prints deviation in joints
                break  # No need to check further if one pair of elements is not within range)
    stage += 1
    print("Stage:" , stage)

def getPill(point, approach):
    #Puts pill into jar based on approach point and dispensing point
    global speed
    mc.send_angles(approach,speed)
    destinationArrival(approach)
    mc.send_angles(point,speed)
    destinationArrival(point)
    mc.send_angles(approach,speed)
    destinationArrival(approach)
    

def collectJar():
    #Collects jar from predefined location
    global speed
    global jarApproach
    global jarPickup
    global jarTakeOff

    mc.send_angles(jarApproach,speed)
    destinationArrival(jarApproach)

    mc.send_angles(jarPickup,speed)
    destinationArrival(jarPickup)
    close()

    mc.send_angles(jarTakeOff,speed)
    destinationArrival(jarTakeOff)

def jarDropoff():
    #Drops jar off from predefined location
    global speed
    global jarDroppoff
    global jarDroppoffApproach

    mc.send_angles(jarDroppoffApproach,speed)
    destinationArrival(jarDroppoffApproach)

    mc.send_angles(jarDroppoff,speed)
    destinationArrival(jarDroppoff)
    open()

    mc.send_angles(jarDroppoffApproach,speed)
    destinationArrival(jarDroppoffApproach)


########## throughpoints ##########
jarApproach = gearSlopAdjust([138.69, 19.51, 132.70 , 27.8, 48.70, 0])
jarPickup = gearSlopAdjust([151.98, 65.50, 92.99, 21.51, 61.98, 0])
jarTakeOff = gearSlopAdjust([151.98, 20.36, 72.25, 87.39, 61.98, 0])

jarDroppoff = [127.59, 68.55, 76.42, 35.03 , 37.59, 0] 
jarDroppoffApproach = [111.57, 30.80, 111.42, 37.77, 21.57, 0]

rowSwitch = [147.59, 40.85, 64.13, 75.02, 147.59, 0]

greenApproach = gearSlopAdjust([118.24, 23.06, 68.43, 88.51, 118.24, 0])
greenEject = gearSlopAdjust([109.98, 59.0, 5.54, 115.45, 109.98, 0])

purpleApproach = gearSlopAdjust([95.59, 0.12, 96.53, 83.35, 95.59, 0])
purpleEject = gearSlopAdjust([93.42, 31.75, 55.24, 93.01, 93.42, 0])

whiteApproach = gearSlopAdjust([69.29, 1.07, 95.57, 83.36, 69.29, 0])
#whiteApproach = gearSlopAdjust([60.74, -18.65, 111.9, 86.75, 60.74, 0])
whiteEject = gearSlopAdjust([73.77, 18.17, 75.25, 86.58, 73.77, 0])

redApproach = gearSlopAdjust([118.24, 55.27, 93.68, 31.05, 118.24, 0])
redEject = gearSlopAdjust([109.98, 70.52, 55.71, 53.77, 109.98, 0])

blueApproach = gearSlopAdjust([95.59, 46.89, 123.07, 10.04, 95.59, 0])
blueEject = gearSlopAdjust([93.51, 58.38, 85.30, 36.32, 93.51, 0])

goldApproach = gearSlopAdjust([69.29, 47.09, 121.94, 10.97, 69.29, 0])
#goldApproach = gearSlopAdjust([60.74, 47.02, 143.61, -10.62, 60.74, 0])
goldEject = gearSlopAdjust([73.77, 53.00, 100.22, 26.78, 73.77, 0])




# WHEN "DONE" BUTTON IS PRESSED
# Robot picks the chosen pills up in the jar

########## robot setup ##########
print("Program start")
ser = serial.Serial('/dev/ttyACM0',9600)
mc = MyCobot('/dev/ttyAMA0',115200)
mc.power_on()
mc.set_color(255,223,0) 
mc.send_angles(jarApproach, speed) #Start location
open()

def DoneClicked(a):
    global PillCount
    runOnce = False
    upperRow = False

    if messagebox.askyesno(message="Are you sure?"):
        print(f'Green pills',PillCount[0])
        print(f'Purple pills',PillCount[1])
        print(f'White pills',PillCount[2])
        print(f'Red pills',PillCount[3])
        print(f'Blue pills',PillCount[4])
        print(f'Gold pills',PillCount[5])
        #window.quit()

        

        ########## main function ##########
        collectJar()
        
        while (PillCount[0] > 0):
            #Picks the chosen green pills up
            getPill(greenEject,greenApproach)
            PillCount[0] = PillCount[0] -1
            print(PillCount[0])
            upperRow = True
            
        
        while (PillCount[1] > 0):
            #Picks the chosen purple pills up
            getPill(purpleEject,purpleApproach)
            PillCount[1] = PillCount[1] -1
            print(PillCount[1])
            upperRow = True

        while (PillCount[2] > 0):
            #Picks the chosen white pills up
            if not runOnce:
                #Ensures that the robot does not collide with itself
                mc.send_angles(purpleApproach,speed)
                destinationArrival(purpleApproach)
                runOnce = True

            getPill(whiteEject,whiteApproach)
            PillCount[2] = PillCount[2] -1
            print(PillCount[2])
            upperRow = True
            
       
        if upperRow:
            #Ensures no collision when switching rows
            mc.send_angles(rowSwitch,speed)
            destinationArrival(rowSwitch)


        while (PillCount[3] > 0):
            #Picks the chosen red pills up
            getPill(redEject,redApproach)
            PillCount[3] = PillCount[3] -1
            print(PillCount[3])

        while (PillCount[4] > 0):
            #Picks the chosen blue pills up
            getPill(blueEject,blueApproach)
            PillCount[4] = PillCount[4] -1
            print(PillCount[4])

        runOnce=False

        while (PillCount[5] > 0):
            #Picks the chosen golden pills up

            if not runOnce:
                #Ensures that the robot does not collide with itself
                mc.send_angles(blueApproach,speed)
                destinationArrival(blueApproach)
                runOnce = True
            
            getPill(goldEject,goldApproach)
            PillCount[5] = PillCount[5] -1
            print(PillCount[5])
        
        if runOnce:
                #Ensures that the robot does not collide with itself
                mc.send_angles(blueApproach,speed)
                destinationArrival(blueApproach)


        jarDropoff()

        print("Program slut")
        Zero(a)

##########################
########## Grid ##########

# Creats the grid for the buttons and labels

buttongrid = tk.Frame(window)
buttongrid.columnconfigure((0,1,2,3,4,5,6,7,8,9,10), weight=1, uniform=1)
buttongrid.rowconfigure((0,1,2,4,5,6,7), weight=1, uniform=1)


########## Creats labels ##########

# Labels for dispenser names

# Top left dispenser
namelabel1 = tk.Label(buttongrid, text="dispenser 1", font=('Times Newromen',30),bg="green", fg="black")
namelabel1.grid(row=1, column=0,columnspan = 3, sticky=NSEW)

# Top middel dispenser
namelabel2 = tk.Label(buttongrid, text="dispenser 2", font=('Arial',30),bg="purple", fg="black")
namelabel2.grid(row=1, column=4,columnspan = 3, sticky=NSEW)

# Top right dispenser
namelabel3 = tk.Label(buttongrid, text="dispenser 3", font=('Arial',30),bg="white", fg="black")
namelabel3.grid(row=1, column=8,columnspan = 3, sticky=NSEW)

# Bottom left dispenser
namelabel4 = tk.Label(buttongrid, text="dispenser 4", font=('Arial',30),bg="red", fg="black")
namelabel4.grid(row=4, column=0,columnspan = 3, sticky=NSEW)

# Bottom middel dispenser
namelabel5 = tk.Label(buttongrid, text="dispenser 5", font=('Arial',30),bg="blue", fg="black")
namelabel5.grid(row=4, column=4,columnspan = 3, sticky=NSEW)

# Top right dispenser
namelabel6 = tk.Label(buttongrid, text="dispenser 6", font=('Arial',30),bg="gold", fg="black")
namelabel6.grid(row=4, column=8,columnspan = 3, sticky=NSEW)


# Labels for numbers

# Top left number
label1 = tk.Label(buttongrid, text=PillCount[0], font=('Arial',30))
label1.grid(row=2, column=1, sticky=NSEW)

# Top middel number
label2 = tk.Label(buttongrid, text=PillCount[1], font=('Arial',30))
label2.grid(row=2, column=5, sticky=NSEW)

# Top right number
label3 = tk.Label(buttongrid, text=PillCount[1], font=('Arial',30))
label3.grid(row=2, column=9, sticky=NSEW)

# Bottom left number
label4 = tk.Label(buttongrid, text=PillCount[0], font=('Arial',30))
label4.grid(row=5, column=1, sticky=NSEW)

# Bottom middel number
label5 = tk.Label(buttongrid, text=PillCount[1], font=('Arial',30))
label5.grid(row=5, column=5, sticky=NSEW)

# Bottom right number
label6 = tk.Label(buttongrid, text=PillCount[1], font=('Arial',30))
label6.grid(row=5, column=9, sticky=NSEW)


########## Creats buttons ##########

# Tab buttons

# Zero Tab
tab_button0 = tk.Button(buttongrid, text="Zero", font=('Arial',30),bg="black", fg="white")
tab_button0.grid(row=0, column=0, sticky=NSEW)
tab_button0.bind("<Button-1>", Zero)

# Grethe Tab
tab_button1 = tk.Button(buttongrid, text="Grethe", font=('Arial',30),bg="gray", fg="black")
tab_button1.grid(row=0, column=1, sticky=NSEW)
tab_button1.bind("<Button-1>", Grethe)

# Birthe Tab
tab_button2 = tk.Button(buttongrid, text="Birthe", font=('Arial',30),bg="gray", fg="black")
tab_button2.grid(row=0, column=2, sticky=NSEW)
tab_button2.bind("<Button-1>", Birthe)

# Soeren Tab
tab_button3 = tk.Button(buttongrid, text="Soeren", font=('Arial',30),bg="gray", fg="black")
tab_button3.grid(row=0, column=3, sticky=NSEW)
tab_button3.bind("<Button-1>", Soeren)


##########

# Creats "+" and "-" buttons

button11 = tk.Button(buttongrid, text=" - ", font=('Arial',30))
button11.grid(row=3, column=0, sticky=NSEW)
button11.bind("<Button-1>", clicked11)

button12 = tk.Button(buttongrid, text="+",font=('Arial',30))
button12.grid(row=3, column=2, sticky=NSEW)
button12.bind("<Button-1>", clicked12)


button21 = tk.Button(buttongrid, text=" - ", font=('Arial',30))
button21.grid(row=3, column=4, sticky=NSEW)
button21.bind("<Button-1>", clicked21)

button22 = tk.Button(buttongrid, text="+",font=('Arial',30))
button22.grid(row=3, column=6, sticky=NSEW)
button22.bind("<Button-1>", clicked22)


button31 = tk.Button(buttongrid, text=" - ", font=('Arial',30))
button31.grid(row=3, column=8, sticky=NSEW)
button31.bind("<Button-1>", clicked31)

button32 = tk.Button(buttongrid, text="+", font=('Arial',30))
button32.grid(row=3, column=10, sticky=NSEW)
button32.bind("<Button-1>", clicked32)


button41 = tk.Button(buttongrid, text=" - ", font=('Arial',30))
button41.grid(row=6, column=0, sticky=NSEW)
button41.bind("<Button-1>", clicked41)

button42 = tk.Button(buttongrid, text="+", font=('Arial',30))
button42.grid(row=6, column=2, sticky=NSEW)
button42.bind("<Button-1>", clicked42)


button51 = tk.Button(buttongrid, text=" - ", font=('Arial',30))
button51.grid(row=6, column=4, sticky=NSEW)
button51.bind("<Button-1>", clicked51)

button52 = tk.Button(buttongrid, text="+", font=('Arial',30))
button52.grid(row=6, column=6, sticky=NSEW)
button52.bind("<Button-1>", clicked52)


button61 = tk.Button(buttongrid, text=" - ", font=('Arial',30))
button61.grid(row=6, column=8, sticky=NSEW)
button61.bind("<Button-1>", clicked61)

button62 = tk.Button(buttongrid, text="+", font=('Arial',30))
button62.grid(row=6, column=10, sticky=NSEW)
button62.bind("<Button-1>", clicked62)

# Done button

button100 = tk.Button(buttongrid, text="Done", font=('Arial',30))
button100.grid(row=7, column=10, sticky=NSEW)
button100.bind("<Button-1>", DoneClicked)


##########

# Makes layout / makes sure it resizes

buttongrid.pack(fill='x')


window.rowconfigure(0, weight=1)
window.columnconfigure(0, weight=1)


window.mainloop()
